// Generated by gencpp from file servocontrol/state.msg
// DO NOT EDIT!


#ifndef SERVOCONTROL_MESSAGE_STATE_H
#define SERVOCONTROL_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servocontrol
{
template <class ContainerAllocator>
struct state_
{
  typedef state_<ContainerAllocator> Type;

  state_()
    : last_cmd()
    , step(0)
    , speed(0.0)
    , x(0)
    , y(0)  {
    }
  state_(const ContainerAllocator& _alloc)
    : last_cmd(_alloc)
    , step(0)
    , speed(0.0)
    , x(0)
    , y(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _last_cmd_type;
  _last_cmd_type last_cmd;

   typedef uint8_t _step_type;
  _step_type step;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _x_type;
  _x_type x;

   typedef uint8_t _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::servocontrol::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servocontrol::state_<ContainerAllocator> const> ConstPtr;

}; // struct state_

typedef ::servocontrol::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::servocontrol::state > statePtr;
typedef boost::shared_ptr< ::servocontrol::state const> stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servocontrol::state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servocontrol::state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::servocontrol::state_<ContainerAllocator1> & lhs, const ::servocontrol::state_<ContainerAllocator2> & rhs)
{
  return lhs.last_cmd == rhs.last_cmd &&
    lhs.step == rhs.step &&
    lhs.speed == rhs.speed &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::servocontrol::state_<ContainerAllocator1> & lhs, const ::servocontrol::state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace servocontrol

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::servocontrol::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servocontrol::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servocontrol::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servocontrol::state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servocontrol::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servocontrol::state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servocontrol::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c95f0a0c1b57d8b8eaffcee8de0dcceb";
  }

  static const char* value(const ::servocontrol::state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc95f0a0c1b57d8b8ULL;
  static const uint64_t static_value2 = 0xeaffcee8de0dccebULL;
};

template<class ContainerAllocator>
struct DataType< ::servocontrol::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servocontrol/state";
  }

  static const char* value(const ::servocontrol::state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servocontrol::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string last_cmd\n"
"uint8 step\n"
"float32 speed\n"
"uint8 x\n"
"uint8 y\n"
;
  }

  static const char* value(const ::servocontrol::state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servocontrol::state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.last_cmd);
      stream.next(m.step);
      stream.next(m.speed);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servocontrol::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servocontrol::state_<ContainerAllocator>& v)
  {
    s << indent << "last_cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.last_cmd);
    s << indent << "step: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.step);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVOCONTROL_MESSAGE_STATE_H
